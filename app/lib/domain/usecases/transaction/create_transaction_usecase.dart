import 'package:dartz/dartz.dart';
import '../../../core/errors/failures.dart';
import '../../entities/transaction_entity.dart';
import '../../repositories/transaction_repository.dart';

/// Use case for creating a new transaction
class CreateTransactionUseCase {
  final TransactionRepository repository;

  CreateTransactionUseCase(this.repository);

  /// Execute the use case
  ///
  /// Creates a new transaction with the current timestamp
  /// Returns Right(TransactionEntity) on success
  /// Returns Left(Failure) on error
  Future<Either<Failure, TransactionEntity>> call({
    required String userId,
    required TransactionType type,
    required double amount,
    required String description,
    required DateTime date,
    required TransactionCategory category,
  }) async {
    // Validate amount
    if (amount <= 0) {
      return Left(
        ValidationFailure(message: 'O valor deve ser maior que zero'),
      );
    }

    // Validate description
    if (description.trim().isEmpty) {
      return Left(
        ValidationFailure(message: 'A descrição é obrigatória'),
      );
    }

    // Create transaction entity
    final transaction = TransactionEntity(
      id: '', // Will be generated by Firestore
      type: type,
      amount: amount,
      description: description.trim(),
      date: date,
      category: category,
      userId: userId,
      createdAt: DateTime.now(),
    );

    return await repository.createTransaction(transaction);
  }
}
